{"version":3,"file":"static/js/808.261e8dc0.chunk.js","mappings":"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","sources":["components/AddContacts/ContactForm.styled.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/AddContacts/ContactForm.jsx","page/ContactFormPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const FormContact = styled.form`\n  max-width: 250px;\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n`;\n\nexport const FormLable = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 5px;\n  font-size: 14px;\n  border-radius: 5px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n`;\n\nexport const FormButton = styled.button`\n  width: 100px;\n  padding: 5px;\n  background-color: #35363a;\n  border: 1px solid gray;\n  border-radius: 5px;\n  margin-top: 10px;\n  font-size: 14px;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n`;\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  margin: 0;\n`;\n\nexport const ContactsItem = styled.li`\n  font-size: 18px;\n  padding: 5px;\n`;\n\nexport const ContactsItemName = styled.span`\n  font-weight: 500;\n  font-size: 20px;\n`;\n\nexport const ContactsItemNumber = styled.span`\n  font-size: 16px;\n`;\n\nexport const ContactBtnDelete = styled.button`\n  background-color: #35363a;\n  color: white;\n  padding: 5px;\n  font-size: 16px;\n  margin-left: 15px;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as contactsOperation from 'redux/contacts/operations';\nimport { RotatingLines } from 'react-loader-spinner';\nimport {\n  Contacts,\n  ContactsItem,\n  ContactsItemName,\n  ContactsItemNumber,\n  ContactBtnDelete,\n} from './ContactsList.styled';\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const loading = useSelector(state => state.contacts.isLoading);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperation.getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {loading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"50\"\n          visible={true}\n        />\n      )}\n      {contacts && contacts.length > 0 && !loading && (\n        <Contacts>\n          {contacts\n            .filter(({ name }) =>\n              name.toLowerCase().includes(filter.toLowerCase())\n            )\n            .map(({ id, name, phone }) => {\n              return (\n                <ContactsItem key={id}>\n                  <ContactsItemName>{name}:</ContactsItemName>\n                  <ContactsItemNumber> {phone}</ContactsItemNumber>\n                  <ContactBtnDelete\n                    type=\"button\"\n                    onClick={() =>\n                      dispatch(contactsOperation.deleteContact(id))\n                    }\n                  >\n                    Delete\n                  </ContactBtnDelete>\n                </ContactsItem>\n              );\n            })}\n        </Contacts>\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport toast from 'react-hot-toast';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as contactsOperation from 'redux/contacts/operations';\nimport { Button, TextField } from '@mui/material';\nimport { FormContact } from './ContactForm.styled';\nimport ContactsList from 'components/ContactsList';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().required(),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n\n    validationSchema: schema,\n    onSubmit: (values, { resetForm }) => {\n      const findName = contacts.find(\n        contact =>\n          contact.name === values.name && contact.number === values.number\n      );\n\n      if (findName) {\n        toast.error(`${values.name} is already in contacts!`);\n        resetForm();\n        return;\n      } else {\n        toast.success(`${values.name} successfully added!`);\n      }\n      dispatch(contactsOperation.addContact(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <>\n      <FormContact onSubmit={formik.handleSubmit}>\n        <TextField\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n        />\n\n        <TextField\n          id=\"number\"\n          type=\"text\"\n          name=\"number\"\n          label=\"Phone\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n        />\n\n        <Button variant=\"contained\" type=\"submit\">\n          Add contact\n        </Button>\n      </FormContact>\n\n      <ContactsList />\n    </>\n  );\n};\n\nexport default ContactForm;\n","import ContactForm from 'components/AddContacts/ContactForm';\n\nconst ContactFormPage = () => {\n  return <ContactForm />;\n};\n\nexport default ContactFormPage;\n"],"names":["FormContact","styled","Field","ErrorMessage","Contacts","ContactsItem","ContactsItemName","ContactsItemNumber","ContactBtnDelete","contacts","useSelector","state","items","loading","isLoading","filter","dispatch","useDispatch","useEffect","contactsOperation","strokeColor","strokeWidth","animationDuration","width","visible","length","name","toLowerCase","includes","map","id","phone","type","onClick","schema","yup","shape","required","number","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","find","contact","toast","handleSubmit","TextField","label","value","onChange","handleChange","error","touched","Boolean","errors","Button","variant"],"sourceRoot":""}