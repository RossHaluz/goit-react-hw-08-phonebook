{"version":3,"file":"static/js/373.caac9384.chunk.js","mappings":"uOAGaA,GAAYC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,wGAOTE,GAAiBF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,8DAKdI,EAAeJ,EAAAA,EAAAA,OAAH,sFAMZK,GAAQL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,uC,uCCddO,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KAAaG,WACpBC,SAAUJ,EAAAA,KAAaG,aA6CzB,EA1Cc,WACZ,IAAME,GAAWC,EAAAA,EAAAA,MAYjB,OACE,SAAC,KAAD,CACEC,cAZkB,CACpBL,MAAO,GACPE,SAAU,IAWRI,SARqB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAClCL,EAASM,EAAAA,GAAqBF,IAC9BC,GACD,EAMGE,iBAAkBb,EAHpB,UAKE,UAACR,EAAD,YACE,SAACG,EAAD,CACEmB,KAAK,QACLC,KAAK,QACLC,YAAY,qBAEd,SAAClB,EAAD,CAAOmB,UAAU,IAAIF,KAAK,WAC1B,SAACpB,EAAD,CACEmB,KAAK,WACLC,KAAK,WACLC,YAAY,uBAEd,SAAClB,EAAD,CAAOmB,UAAU,IAAIF,KAAK,cAE1B,SAAClB,EAAD,CAAciB,KAAK,SAAnB,oBACA,gCACK,SAAC,KAAD,CAAMI,GAAG,YAAT,6BAKZ,EC9CD,EAJkB,WAChB,OAAO,SAAC,EAAD,GACR,C","sources":["components/Login/Login.styled.jsx","components/Login/Login.jsx","pages/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const LoginForm = styled(Form)`\n  display: flex;\n  max-width: 350px;\n  gap: 20px;\n  flex-direction: column;\n`;\n\nexport const LoginFormInput = styled(Field)`\n  font-size: 16px;\n  padding: 10px;\n`;\n\nexport const LoginFormBtn = styled.button`\n  font-size: 16px;\n  padding: 10px;\n  border-radius: 10px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n`;\n","import { Formik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { LoginForm, LoginFormInput, LoginFormBtn, Error } from './Login.styled';\nimport * as authOperations from 'redux/auth/operations';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\n\nlet schema = yup.object().shape({\n  email: yup.string().required(),\n  password: yup.number().required(),\n});\n\nconst Login = () => {\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmitForm = (values, { resetForm }) => {\n    dispatch(authOperations.login(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmitForm}\n      validationSchema={schema}\n    >\n      <LoginForm>\n        <LoginFormInput\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Type your email\"\n        />\n        <Error component=\"p\" name=\"email\" />\n        <LoginFormInput\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Type you password\"\n        />\n        <Error component=\"p\" name=\"password\" />\n\n        <LoginFormBtn type=\"submit\">Login</LoginFormBtn>\n        <p>\n          Or <Link to=\"/register\">Register</Link>\n        </p>\n      </LoginForm>\n    </Formik>\n  );\n};\n\nexport default Login;\n","import Login from 'components/Login';\n\nconst LoginPage = () => {\n  return <Login />;\n};\n\nexport default LoginPage;\n"],"names":["LoginForm","styled","Form","LoginFormInput","Field","LoginFormBtn","Error","ErrorMessage","schema","yup","shape","email","required","password","dispatch","useDispatch","initialValues","onSubmit","values","resetForm","authOperations","validationSchema","type","name","placeholder","component","to"],"sourceRoot":""}