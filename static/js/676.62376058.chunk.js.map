{"version":3,"file":"static/js/676.62376058.chunk.js","mappings":"kSAGaA,EAAcC,EAAAA,EAAAA,KAAH,wG,GAOCA,EAAAA,EAAAA,MAAH,0FAMGA,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,uIAQIA,EAAAA,EAAAA,OAAH,yNAYFA,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,uC,QC3BdG,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaG,aA6DtB,EA1DoB,WAClB,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAE5BC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbX,KAAM,GACNE,MAAO,IAGTU,iBAAkBf,EAClBgB,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAMnB,GALiBV,EAASW,MACxB,SAAAC,GAAO,OACLA,EAAQjB,OAASc,EAAOd,MAAQiB,EAAQf,QAAUY,EAAOZ,KADpD,IAOP,OAFAgB,EAAAA,GAAAA,MAAA,UAAeJ,EAAOd,KAAtB,kCACAe,IAGAG,EAAAA,GAAAA,QAAA,UAAiBJ,EAAOd,KAAxB,yBAEFG,EAASgB,EAAAA,GAA6BL,IACtCC,GACD,IAGH,OACE,UAACtB,EAAD,CAAaoB,SAAUJ,EAAOW,aAA9B,WACE,SAACC,EAAA,EAAD,CACEC,GAAG,OACHC,KAAK,OACLvB,KAAK,OACLwB,MAAM,OACNC,MAAOhB,EAAOK,OAAOd,KACrB0B,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOoB,QAAQ7B,MAAQ8B,QAAQrB,EAAOsB,OAAO/B,SAGtD,SAACqB,EAAA,EAAD,CACEC,GAAG,QACHC,KAAK,OACLvB,KAAK,QACLwB,MAAM,QACNC,MAAOhB,EAAOK,OAAOZ,MACrBwB,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOoB,QAAQ3B,OAAS4B,QAAQrB,EAAOsB,OAAO7B,UAGvD,SAAC8B,EAAA,EAAD,CAAQC,QAAQ,YAAYV,KAAK,SAAjC,2BAKL,EChED,EAJwB,WACtB,OAAO,SAAC,EAAD,GACR,C","sources":["components/AddContacts/ContactForm.styled.jsx","components/AddContacts/ContactForm.jsx","page/ContactFormPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const FormContact = styled.form`\n  max-width: 250px;\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n`;\n\nexport const FormLable = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 5px;\n  font-size: 14px;\n  border-radius: 5px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n`;\n\nexport const FormButton = styled.button`\n  width: 100px;\n  padding: 5px;\n  background-color: #35363a;\n  border: 1px solid gray;\n  border-radius: 5px;\n  margin-top: 10px;\n  font-size: 14px;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n`;\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport toast from 'react-hot-toast';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as contactsOperation from 'redux/contactsOperation';\nimport { Button, TextField } from '@mui/material';\nimport { FormContact } from './ContactForm.styled';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  phone: yup.number().required(),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      phone: '',\n    },\n\n    validationSchema: schema,\n    onSubmit: (values, { resetForm }) => {\n      const findName = contacts.find(\n        contact =>\n          contact.name === values.name && contact.phone === values.phone\n      );\n\n      if (findName) {\n        toast.error(`${values.name} is already in contacts!`);\n        resetForm();\n        return;\n      } else {\n        toast.success(`${values.name} successfully added!`);\n      }\n      dispatch(contactsOperation.addContact(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <FormContact onSubmit={formik.handleSubmit}>\n      <TextField\n        id=\"name\"\n        type=\"text\"\n        name=\"name\"\n        label=\"Name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n      />\n\n      <TextField\n        id=\"phone\"\n        type=\"text\"\n        name=\"phone\"\n        label=\"Phone\"\n        value={formik.values.phone}\n        onChange={formik.handleChange}\n        error={formik.touched.phone && Boolean(formik.errors.phone)}\n      />\n\n      <Button variant=\"contained\" type=\"submit\">\n        Add contact\n      </Button>\n    </FormContact>\n  );\n};\n\nexport default ContactForm;\n","import ContactForm from 'components/AddContacts/ContactForm';\n\nconst ContactFormPage = () => {\n  return <ContactForm />;\n};\n\nexport default ContactFormPage;\n"],"names":["FormContact","styled","Field","ErrorMessage","schema","yup","shape","name","required","phone","dispatch","useDispatch","contacts","useSelector","state","items","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","find","contact","toast","contactsOperation","handleSubmit","TextField","id","type","label","value","onChange","handleChange","error","touched","Boolean","errors","Button","variant"],"sourceRoot":""}