{"version":3,"file":"static/js/255.20a243a7.chunk.js","mappings":"uNAEaA,E,QAAYC,EAAAA,KAAH,2H,mECMlBC,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,GACG,oBACPE,MAAM,uBACNC,SAAS,qBACZC,SAAUJ,EAAAA,GACA,uBACPK,IAAI,EAAG,qDACPF,SAAS,0BAkDd,EA/Cc,WACZ,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbR,MAAO,GACPE,SAAU,IAEZO,iBAAkBZ,EAClBa,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBR,EAASS,EAAAA,GAAoBF,IAC7BC,GACD,IAGH,OACE,UAACjB,EAAD,CAAWe,SAAUJ,EAAOQ,aAA5B,WACE,SAACC,EAAA,EAAD,CACEC,GAAG,QACHC,KAAK,QACLC,MAAM,SACNC,QAAQ,WACRC,KAAK,QACLC,MAAOf,EAAOK,OAAOX,MACrBsB,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOmB,QAAQzB,OAAS0B,QAAQpB,EAAOqB,OAAO3B,UAEvD,SAACe,EAAA,EAAD,CACEC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,QAAQ,WACRC,KAAK,WACLC,MAAOf,EAAOK,OAAOT,SACrBoB,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOmB,QAAQvB,UAAYwB,QAAQpB,EAAOqB,OAAOzB,aAG1D,SAAC0B,EAAA,EAAD,CAAQT,QAAQ,YAAYF,KAAK,SAAjC,oBAGA,UAACY,EAAA,EAAD,CAAYV,QAAQ,IAApB,iBACK,SAAC,KAAD,CAAMW,GAAG,WAAT,2BAIV,EC1DD,EAJkB,WAChB,OAAO,SAAC,EAAD,GACR,C","sources":["components/Login/Login.styled.jsx","components/Login/Login.jsx","page/LoginPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const LoginForm = styled.form`\n  display: flex;\n  margin: 0 auto;\n  max-width: 350px;\n  gap: 20px;\n  flex-direction: column;\n`;\n","import { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { LoginForm } from './Login.styled';\nimport * as yup from 'yup';\nimport { TextField, Button, Typography } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport * as authOperation from 'redux/auth/operations';\n\nlet schema = yup.object().shape({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: schema,\n    onSubmit: (values, { resetForm }) => {\n      dispatch(authOperation.login(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <LoginForm onSubmit={formik.handleSubmit}>\n      <TextField\n        id=\"email\"\n        type=\"email\"\n        label=\"E-mail\"\n        variant=\"outlined\"\n        name=\"email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n      />\n      <TextField\n        id=\"password\"\n        type=\"password\"\n        label=\"Password\"\n        variant=\"outlined\"\n        name=\"password\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n      />\n\n      <Button variant=\"contained\" type=\"submit\">\n        Login\n      </Button>\n      <Typography variant=\"p\">\n        Or <Link to=\"/signout\">Register</Link>\n      </Typography>\n    </LoginForm>\n  );\n};\n\nexport default Login;\n","import Login from 'components/Login';\n\nconst LoginPage = () => {\n  return <Login />;\n};\n\nexport default LoginPage;\n"],"names":["LoginForm","styled","schema","yup","shape","email","required","password","min","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","authOperation","handleSubmit","TextField","id","type","label","variant","name","value","onChange","handleChange","error","touched","Boolean","errors","Button","Typography","to"],"sourceRoot":""}