{"version":3,"file":"static/js/377.2b10347c.chunk.js","mappings":"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","sources":["components/AddContacts/ContactForm.styled.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/FilterContacts/FilterContacts.styled.jsx","components/FilterContacts/FilterContacts.jsx","components/AddContacts/ContactForm.jsx","page/ContactFormPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\nimport { Typography } from '@mui/material';\n\nexport const FormContact = styled.form`\n  max-width: 250px;\n  display: flex;\n  margin: 0 auto;\n  gap: 20px;\n  flex-direction: column;\n`;\n\nexport const FormLable = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 5px;\n  font-size: 14px;\n  border-radius: 5px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n`;\n\nexport const FormButton = styled.button`\n  width: 100px;\n  padding: 5px;\n  background-color: #35363a;\n  border: 1px solid gray;\n  border-radius: 5px;\n  margin-top: 10px;\n  font-size: 14px;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const ContactTitle = styled(Typography)`\n  font-size: 24px;\n  font-weight: 500;\n  text-align: center;\n`;\n","import styled from '@emotion/styled';\nimport { IconButton } from '@mui/material';\n\nexport const Contacts = styled.ul`\n  margin: 0;\n  text-align: center;\n  list-style: none;\n  padding: 0;\n`;\n\nexport const ContactsItem = styled.li`\n  font-size: 18px;\n  padding: 5px;\n`;\n\nexport const ContactsItemName = styled.span`\n  font-weight: 500;\n  font-size: 20px;\n`;\n\nexport const ContactsItemNumber = styled.span`\n  font-size: 16px;\n`;\n\nexport const ContactBtnDelete = styled(IconButton)`\n  margin-left: 5px;\n`;\n\nexport const ContactsContainer = styled.div`\n  text-align: center;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as contactsOperation from 'redux/contacts/operations';\nimport { RotatingLines } from 'react-loader-spinner';\nimport {\n  Contacts,\n  ContactsItem,\n  ContactsItemName,\n  ContactsItemNumber,\n  ContactBtnDelete,\n  ContactsContainer,\n} from './ContactsList.styled';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CreateIcon from '@mui/icons-material/Create';\nimport { IconButton } from '@mui/material';\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const loading = useSelector(state => state.contacts.isLoading);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperation.getContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactsContainer>\n      {loading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"50\"\n          visible={true}\n        />\n      )}\n      {contacts && contacts.length > 0 && !loading && (\n        <Contacts>\n          {contacts\n            .filter(({ name }) =>\n              name.toLowerCase().includes(filter.toLowerCase())\n            )\n            .map(({ id, name, number }) => {\n              return (\n                <ContactsItem key={id}>\n                  <ContactsItemName>{name}:</ContactsItemName>\n                  <ContactsItemNumber> {number}</ContactsItemNumber>\n                  <ContactBtnDelete\n                    aria-label=\"delete\"\n                    type=\"button\"\n                    onClick={() =>\n                      dispatch(contactsOperation.deleteContact(id))\n                    }\n                  >\n                    <DeleteIcon />\n                  </ContactBtnDelete>\n                  <IconButton aria-label=\"create\" type=\"button\">\n                    <CreateIcon />\n                  </IconButton>\n                </ContactsItem>\n              );\n            })}\n        </Contacts>\n      )}\n    </ContactsContainer>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\n\nexport const InputFilter = styled(TextField)`\n  width: 250px;\n  padding: 0;\n  border-radius: 10px;\n  font-size: 13px;\n  display: flex;\n  margin: 0 auto;\n  margin-bottom: 20px;\n  margin-top: 15px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice/filterSlice';\nimport { InputFilter } from './FilterContacts.styled';\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n  const inputValue = useSelector(state => state.filter);\n\n  const onChangeInput = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <InputFilter\n      type=\"text\"\n      value={inputValue}\n      onChange={onChangeInput}\n      id=\"outlined-basic\"\n      label=\"Filter contacts\"\n      variant=\"outlined\"\n    />\n  );\n};\n\nexport default FilterContacts;\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport toast from 'react-hot-toast';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as contactsOperation from 'redux/contacts/operations';\nimport { Button, TextField } from '@mui/material';\nimport { ContactTitle, FormContact } from './ContactForm.styled';\nimport ContactsList from 'components/ContactsList';\nimport FilterContacts from 'components/FilterContacts';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().required(),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n\n    validationSchema: schema,\n    onSubmit: (values, { resetForm }) => {\n      const findName = contacts.find(\n        contact =>\n          contact.name === values.name && contact.number === values.number\n      );\n\n      if (findName) {\n        toast.error(`${values.name} is already in contacts!`);\n        resetForm();\n        return;\n      } else {\n        toast.success(`${values.name} successfully added!`);\n      }\n      dispatch(contactsOperation.addContact(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <>\n      <ContactTitle variant=\"h2\" sx={{ mb: '12px' }}>\n        Add contact\n      </ContactTitle>\n      <FormContact onSubmit={formik.handleSubmit}>\n        <TextField\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n        />\n\n        <TextField\n          id=\"number\"\n          type=\"text\"\n          name=\"number\"\n          label=\"Phone\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n        />\n\n        <Button variant=\"contained\" type=\"submit\">\n          Add contact\n        </Button>\n      </FormContact>\n      <FilterContacts />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default ContactForm;\n","import ContactForm from 'components/AddContacts/ContactForm';\n\nconst ContactFormPage = () => {\n  return <ContactForm />;\n};\n\nexport default ContactFormPage;\n"],"names":["FormContact","styled","ContactTitle","Field","ErrorMessage","Typography","Contacts","ContactsItem","ContactsItemName","ContactsItemNumber","ContactBtnDelete","IconButton","ContactsContainer","contacts","useSelector","state","items","loading","isLoading","filter","dispatch","useDispatch","useEffect","contactsOperation","strokeColor","strokeWidth","animationDuration","width","visible","length","name","toLowerCase","includes","map","id","number","type","onClick","Delete","Create","InputFilter","TextField","inputValue","value","onChange","e","filterContacts","target","label","variant","schema","yup","shape","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","find","contact","toast","sx","mb","handleSubmit","handleChange","error","touched","Boolean","errors","Button"],"sourceRoot":""}