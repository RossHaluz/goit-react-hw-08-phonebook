{"version":3,"file":"static/js/690.ae87f3f4.chunk.js","mappings":"oUAIaA,EAAcC,EAAAA,EAAAA,KAAH,2HAsCXC,GA9BYD,EAAAA,EAAAA,MAAH,0FAMGA,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,uIAQIA,EAAAA,EAAAA,OAAH,yNAYFA,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,wCAIUA,EAAAA,EAAAA,GAAOI,EAAAA,EAAPJ,CAAH,yF,UCxCZK,EAAWL,EAAAA,EAAAA,GAAH,iGAORM,EAAoBN,EAAAA,EAAAA,IAAH,+C,oBCNjBO,EAAeP,EAAAA,EAAAA,GAAH,6DAKZQ,EAAmBR,EAAAA,EAAAA,KAAH,iEAKhBS,EAAqBT,EAAAA,EAAAA,KAAH,4CAIlBU,GAAmBV,EAAAA,EAAAA,GAAOW,EAAAA,EAAPX,CAAH,6C,6BCfhBY,EAAOZ,EAAAA,EAAAA,KAAH,wG,UCAJa,EAAWb,EAAAA,EAAAA,IAAH,uOAaRc,EAAed,EAAAA,EAAAA,IAAH,sE,SCXnBe,EAAYC,SAASC,cAAc,eA8BzC,EA5Bc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SACzBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,SAAAC,GACJ,WAAXA,EAAEC,MACJJ,GAEH,EAGD,OAFAK,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,GAAE,CAACF,IAQJ,OAAOQ,EAAAA,EAAAA,eACL,SAACd,EAAD,CAAUe,QAPgB,SAAAN,GACtBA,EAAEO,SAAWP,EAAEQ,eACjBX,GAEH,EAGC,UACE,SAACL,EAAD,UAAeI,MAEjBH,EAEH,ECvBKgB,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,GAAW,mBAAmBE,SAAS,oBAC7CC,OAAQH,EAAAA,GAAW,qBAAqBE,SAAS,wBAiDnD,EA9CsB,SAAC,GAAuB,IAArBE,EAAoB,EAApBA,KAAMjB,EAAc,EAAdA,QACrBkB,EAAqBD,EAArBC,GAAIJ,EAAiBG,EAAjBH,KAAME,EAAWC,EAAXD,OACZG,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbT,KAAMA,EACNE,OAAQA,GAEVJ,iBAAkBA,EAClBY,SAAU,SAAAC,GACRN,EAASO,EAAAA,IAAA,QAAiCR,GAAAA,GAAOO,KACjDzB,GACD,IAGH,OACE,SAAC,EAAD,CAAOA,QAASA,EAAhB,UACE,UAACP,EAAD,CAAM+B,SAAUH,EAAOM,aAAvB,WACE,SAACC,EAAA,EAAD,CACEV,GAAG,OACHJ,KAAK,OACLe,MAAM,OACNC,MAAOT,EAAOI,OAAOX,KACrBiB,SAAUV,EAAOW,aACjBC,MAAOZ,EAAOa,QAAQpB,MAAQqB,QAAQd,EAAOe,OAAOtB,MACpDuB,WAAYhB,EAAOa,QAAQpB,MAAQO,EAAOe,OAAOtB,QAEnD,SAACc,EAAA,EAAD,CACEV,GAAG,SACHJ,KAAK,SACLe,MAAM,SACNS,KAAK,OACLR,MAAOT,EAAOI,OAAOT,OACrBe,SAAUV,EAAOW,aACjBC,MAAOZ,EAAOa,QAAQlB,QAAUmB,QAAQd,EAAOe,OAAOpB,QACtDqB,WAAYhB,EAAOa,QAAQlB,QAAUK,EAAOe,OAAOpB,UAErD,SAACuB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,WAAS,EAACJ,KAAK,SAA3D,wBAMP,ECdD,EA9BoB,SAAC,GAAc,IAAZrB,EAAW,EAAXA,KACfE,GAAWC,EAAAA,EAAAA,MACTF,EAAqBD,EAArBC,GAAIJ,EAAiBG,EAAjBH,KAAME,EAAWC,EAAXD,OAClB,GAA4B2B,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAc,WAClBD,GAAU,SAAAE,GAAI,OAAKA,CAAL,GACf,EAED,OACE,iCACE,UAAC3D,EAAD,YACE,UAACC,EAAD,WAAmByB,EAAnB,QACA,UAACxB,EAAD,eAAsB0B,MACtB,SAACzB,EAAD,CACE,aAAW,SACX+C,KAAK,SACL7B,QAAS,kBAAMU,EAAS6B,EAAAA,GAAgC9B,GAA/C,EAHX,UAKE,SAAC+B,EAAA,EAAD,OAEF,SAACzD,EAAA,EAAD,CAAY,aAAW,SAAS8C,KAAK,SAAS7B,QAASqC,EAAvD,UACE,SAACI,EAAA,EAAD,SAGHN,IAAU,SAAC,EAAD,CAAe3B,KAAMA,EAAMjB,QAAS8C,MAGpD,ECCD,GApCqB,WACnB,IAAMK,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAC5BC,GAAUH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASK,SAAnB,IAC3BC,GAASL,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMI,MAAV,IAC1BtC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAnB,EAAAA,EAAAA,YAAU,WACRkB,EAAS6B,EAAAA,KACV,GAAE,CAAC7B,KAGF,UAAChC,EAAD,WACGoE,IACC,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IAGZX,GAAYA,EAASY,OAAS,IAAMR,IACnC,SAACrE,EAAD,UACGiE,EACEM,QAAO,qBAAG3C,KACJkD,cAAcC,SAASR,EAAOO,cAD7B,IAGPE,KAAI,SAAAC,GACH,OAAO,SAAC,EAAD,CAA8BlD,KAAMkD,GAAlBA,EAAQjD,GAClC,QAKZ,E,WCtCYkD,IAAcvF,EAAAA,EAAAA,GAAO+C,EAAAA,EAAP/C,CAAH,sLCqBxB,GApBuB,WACrB,IAAMsC,GAAWC,EAAAA,EAAAA,MACXiD,GAAajB,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMI,MAAV,IAMpC,OACE,SAACW,GAAD,CACE9B,KAAK,OACLR,MAAOuC,EACPtC,SARkB,SAAA5B,GACpBgB,GAASmD,EAAAA,GAAAA,GAAenE,EAAEO,OAAOoB,OAClC,EAOGZ,GAAG,iBACHW,MAAM,kBACNY,QAAQ,YAGb,ECXG8B,GAAS1D,EAAAA,KAAa2D,MAAM,CAC9B1D,KAAMD,EAAAA,KAAaE,WACnBC,OAAQH,EAAAA,KAAaE,aAoEvB,GAjEoB,WAClB,IAAMI,GAAWC,EAAAA,EAAAA,MACX+B,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAE5BjC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbT,KAAM,GACNE,OAAQ,IAGVJ,iBAAkB2D,GAClB/C,SAAU,SAACC,EAAD,GAA4B,IAAjBgD,EAAgB,EAAhBA,UAMnB,GALiBtB,EAASuB,MACxB,SAAAP,GAAO,OACLA,EAAQrD,OAASW,EAAOX,MAAQqD,EAAQnD,SAAWS,EAAOT,MADrD,IAOP,OAFA2D,EAAAA,GAAAA,MAAA,UAAelD,EAAOX,KAAtB,kCACA2D,IAGAE,EAAAA,GAAAA,QAAA,UAAiBlD,EAAOX,KAAxB,yBAEFK,EAAS6B,EAAAA,GAA6BvB,IACtCgD,GACD,IAGH,OACE,iCACE,SAAC3F,EAAD,CAAc2D,QAAQ,KAAKmC,GAAI,CAAEC,GAAI,QAArC,0BAGA,UAACjG,EAAD,CAAa4C,SAAUH,EAAOM,aAA9B,WACE,SAACC,EAAA,EAAD,CACEV,GAAG,OACHoB,KAAK,OACLxB,KAAK,OACLe,MAAM,OACNC,MAAOT,EAAOI,OAAOX,KACrBiB,SAAUV,EAAOW,aACjBC,MAAOZ,EAAOa,QAAQpB,MAAQqB,QAAQd,EAAOe,OAAOtB,SAGtD,SAACc,EAAA,EAAD,CACEV,GAAG,SACHoB,KAAK,OACLxB,KAAK,SACLe,MAAM,QACNC,MAAOT,EAAOI,OAAOT,OACrBe,SAAUV,EAAOW,aACjBC,MAAOZ,EAAOa,QAAQlB,QAAUmB,QAAQd,EAAOe,OAAOpB,WAGxD,SAACuB,EAAA,EAAD,CAAQE,QAAQ,YAAYH,KAAK,SAAjC,6BAIF,SAAC,GAAD,KACA,SAAC,GAAD,MAGL,ECzED,GAJwB,WACtB,OAAO,SAAC,GAAD,GACR,C","sources":["components/AddContacts/ContactForm.styled.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/UpdateContact/UpdateContact.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/UpdateContact/UpdateContact.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","components/FilterContacts/FilterContacts.styled.jsx","components/FilterContacts/FilterContacts.jsx","components/AddContacts/ContactForm.jsx","page/ContactFormPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\nimport { Typography } from '@mui/material';\n\nexport const FormContact = styled.form`\n  max-width: 250px;\n  display: flex;\n  margin: 0 auto;\n  gap: 20px;\n  flex-direction: column;\n`;\n\nexport const FormLable = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 5px;\n  font-size: 14px;\n  border-radius: 5px;\n  border: 1px solid gray;\n  margin-bottom: 10px;\n`;\n\nexport const FormButton = styled.button`\n  width: 100px;\n  padding: 5px;\n  background-color: #35363a;\n  border: 1px solid gray;\n  border-radius: 5px;\n  margin-top: 10px;\n  font-size: 14px;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const ContactTitle = styled(Typography)`\n  font-size: 24px;\n  font-weight: 500;\n  text-align: center;\n`;\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  margin: 0;\n  text-align: center;\n  list-style: none;\n  padding: 0;\n`;\n\nexport const ContactsContainer = styled.div`\n  text-align: center;\n`;\n","import styled from '@emotion/styled';\nimport { IconButton } from '@mui/material';\n\nexport const ContactsItem = styled.li`\n  font-size: 18px;\n  padding: 5px;\n`;\n\nexport const ContactsItemName = styled.span`\n  font-weight: 500;\n  font-size: 20px;\n`;\n\nexport const ContactsItemNumber = styled.span`\n  font-size: 16px;\n`;\n\nexport const ContactBtnDelete = styled(IconButton)`\n  margin-left: 5px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  max-width: 350px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.3);\n  z-index: 1200;\n`;\n\nexport const ModalContact = styled.div`\n  padding: 20px;\n  background-color: white;\n`;\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Backdrop, ModalContact } from './Modal.styled';\n\nconst modalRoor = document.querySelector('#modal-root');\n\nconst Modal = ({ children, onClose }) => {\n  useEffect(() => {\n    const onCloseModal = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n    window.addEventListener('keydown', onCloseModal);\n\n    return () => {\n      window.removeEventListener('keydown', onCloseModal);\n    };\n  }, [onClose]);\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <ModalContact>{children}</ModalContact>\n    </Backdrop>,\n    modalRoor\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { TextField, Button } from '@mui/material';\nimport { Form } from './UpdateContact.styled';\nimport * as ContactOparetion from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport Modal from 'components/Modal';\n\nconst validationSchema = yup.object({\n  name: yup.string('Enter your name').required('Name is required'),\n  number: yup.string('Enter your number').required('Number is required'),\n});\n\nconst UpdateContact = ({ data, onClose }) => {\n  const { id, name, number } = data;\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: name,\n      number: number,\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      dispatch(ContactOparetion.updateContsct({ id, ...values }));\n      onClose();\n    },\n  });\n\n  return (\n    <Modal onClose={onClose}>\n      <Form onSubmit={formik.handleSubmit}>\n        <TextField\n          id=\"name\"\n          name=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          id=\"number\"\n          name=\"number\"\n          label=\"Number\"\n          type=\"tell\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default UpdateContact;\n","import {\n  ContactsItem,\n  ContactsItemName,\n  ContactsItemNumber,\n  ContactBtnDelete,\n} from './ContactItem.styled';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CreateIcon from '@mui/icons-material/Create';\nimport { IconButton } from '@mui/material';\nimport UpdateContact from 'components/UpdateContact';\nimport * as contactsOperation from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nconst ContactItem = ({ data }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = data;\n  const [isOpen, setIsOpen] = useState(false);\n\n  const onShowModal = () => {\n    setIsOpen(prev => !prev);\n  };\n\n  return (\n    <>\n      <ContactsItem>\n        <ContactsItemName>{name}:</ContactsItemName>\n        <ContactsItemNumber> {number}</ContactsItemNumber>\n        <ContactBtnDelete\n          aria-label=\"delete\"\n          type=\"button\"\n          onClick={() => dispatch(contactsOperation.deleteContact(id))}\n        >\n          <DeleteIcon />\n        </ContactBtnDelete>\n        <IconButton aria-label=\"create\" type=\"button\" onClick={onShowModal}>\n          <CreateIcon />\n        </IconButton>\n      </ContactsItem>\n      {isOpen && <UpdateContact data={data} onClose={onShowModal} />}\n    </>\n  );\n};\n\nexport default ContactItem;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as contactsOperation from 'redux/contacts/operations';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { Contacts, ContactsContainer } from './ContactsList.styled';\nimport ContactItem from 'components/ContactItem';\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const loading = useSelector(state => state.contacts.isLoading);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperation.getContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactsContainer>\n      {loading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"50\"\n          visible={true}\n        />\n      )}\n      {contacts && contacts.length > 0 && !loading && (\n        <Contacts>\n          {contacts\n            .filter(({ name }) =>\n              name.toLowerCase().includes(filter.toLowerCase())\n            )\n            .map(contact => {\n              return <ContactItem key={contact.id} data={contact} />;\n            })}\n        </Contacts>\n      )}\n    </ContactsContainer>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\n\nexport const InputFilter = styled(TextField)`\n  width: 250px;\n  padding: 0;\n  border-radius: 10px;\n  font-size: 13px;\n  display: flex;\n  margin: 0 auto;\n  margin-bottom: 20px;\n  margin-top: 15px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice/filterSlice';\nimport { InputFilter } from './FilterContacts.styled';\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n  const inputValue = useSelector(state => state.filter);\n\n  const onChangeInput = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <InputFilter\n      type=\"text\"\n      value={inputValue}\n      onChange={onChangeInput}\n      id=\"outlined-basic\"\n      label=\"Filter contacts\"\n      variant=\"outlined\"\n    />\n  );\n};\n\nexport default FilterContacts;\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport toast from 'react-hot-toast';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as contactsOperation from 'redux/contacts/operations';\nimport { Button, TextField } from '@mui/material';\nimport { ContactTitle, FormContact } from './ContactForm.styled';\nimport ContactsList from 'components/ContactsList';\nimport FilterContacts from 'components/FilterContacts';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().required(),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n\n    validationSchema: schema,\n    onSubmit: (values, { resetForm }) => {\n      const findName = contacts.find(\n        contact =>\n          contact.name === values.name && contact.number === values.number\n      );\n\n      if (findName) {\n        toast.error(`${values.name} is already in contacts!`);\n        resetForm();\n        return;\n      } else {\n        toast.success(`${values.name} successfully added!`);\n      }\n      dispatch(contactsOperation.addContact(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <>\n      <ContactTitle variant=\"h2\" sx={{ mb: '12px' }}>\n        Add contact\n      </ContactTitle>\n      <FormContact onSubmit={formik.handleSubmit}>\n        <TextField\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n        />\n\n        <TextField\n          id=\"number\"\n          type=\"text\"\n          name=\"number\"\n          label=\"Phone\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n        />\n\n        <Button variant=\"contained\" type=\"submit\">\n          Add contact\n        </Button>\n      </FormContact>\n      <FilterContacts />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default ContactForm;\n","import ContactForm from 'components/AddContacts/ContactForm';\n\nconst ContactFormPage = () => {\n  return <ContactForm />;\n};\n\nexport default ContactFormPage;\n"],"names":["FormContact","styled","ContactTitle","Field","ErrorMessage","Typography","Contacts","ContactsContainer","ContactsItem","ContactsItemName","ContactsItemNumber","ContactBtnDelete","IconButton","Form","Backdrop","ModalContact","modalRoor","document","querySelector","children","onClose","useEffect","onCloseModal","e","code","window","addEventListener","removeEventListener","createPortal","onClick","target","currentTarget","validationSchema","yup","name","required","number","data","id","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","ContactOparetion","handleSubmit","TextField","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","Button","color","variant","fullWidth","useState","isOpen","setIsOpen","onShowModal","prev","contactsOperation","Delete","Create","contacts","useSelector","state","items","loading","isLoading","filter","strokeColor","strokeWidth","animationDuration","width","visible","length","toLowerCase","includes","map","contact","InputFilter","inputValue","filterContacts","schema","shape","resetForm","find","toast","sx","mb"],"sourceRoot":""}